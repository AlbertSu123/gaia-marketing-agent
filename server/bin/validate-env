#!/usr/bin/env node

import { config } from "dotenv";
import { resolve } from "path";
import { existsSync } from "fs";
import { createInterface } from "readline";

const ENV_HINTS = {
  API_BASE_URL: "Enter your bounty API URL (default: http://localhost:3000)",
  PORT: "Enter the server port (default: 3001)",
  NODE_ENV: "Enter the environment (development/production)",
  TELEGRAM_BOT_TOKEN: "Enter your Telegram bot token from @BotFather",
  TELEGRAM_BOT_NAME: "Enter your Telegram bot name without the @ symbol",
  OPENAI_API_KEY: "Enter your OpenAI API key (used as fallback)",
  GAIANET_MODEL: "Enter your Gaianet model name (default: llama)",
  GAIANET_SERVER_URL: "Enter your Gaianet server URL (default: https://llama8b.gaia.domains/v1)",
  GAIANET_EMBEDDING_MODEL: "Enter your Gaianet embedding model (default: nomic-embed)",
  USE_GAIANET_EMBEDDING: "Set to TRUE to use Gaianet embeddings (default: TRUE)",
  ELIZA_CHARACTER_PATH: "Path to your agent character file (default: marketing-agent.json)",
  ORBIS_CONTEXT_ID: "Your Orbis context ID for gated storage",
  ORBIS_TABLE_ID: "Your Orbis table ID for gated storage",
  ORBIS_ENV: "Your Orbis environment ID",
  ORBIS_SEED: "Your Orbis seed (generate with pnpm gen-seed)",
  ORBIS_GATEWAY_URL: "Orbis gateway URL (default: https://ceramic-orbisdb-mainnet-direct.hirenodes.io)",
  CERAMIC_NODE_URL: "Ceramic node URL (default: https://ceramic-orbisdb-mainnet-direct.hirenodes.io)",
  BOUNTY_FETCH_INTERVAL: "Interval between bounty fetches in ms (default: 1800000)",
  TWEET_DELAY: "Delay between tweets in ms (default: 30000)",
  LOG_LEVEL: "Logging level (default: info)",
  VERBOSE_LOGGING: "Enable verbose logging (default: true)",
};

const REQUIRED_VARS = [
  "API_BASE_URL",
  "PORT",
  "NODE_ENV",
  "TELEGRAM_BOT_TOKEN",
  "TELEGRAM_BOT_NAME",
  "OPENAI_API_KEY",
  "GAIANET_MODEL",
  "GAIANET_SERVER_URL",
  "ELIZA_CHARACTER_PATH"
];

const DEFAULT_VALUES = {
  API_BASE_URL: "http://localhost:3000",
  PORT: "3001",
  NODE_ENV: "development",
  GAIANET_MODEL: "llama",
  GAIANET_SERVER_URL: "https://llama8b.gaia.domains/v1",
  GAIANET_EMBEDDING_MODEL: "nomic-embed",
  USE_GAIANET_EMBEDDING: "TRUE",
  ELIZA_CHARACTER_PATH: "marketing-agent.json",
  ORBIS_GATEWAY_URL: "https://ceramic-orbisdb-mainnet-direct.hirenodes.io",
  CERAMIC_NODE_URL: "https://ceramic-orbisdb-mainnet-direct.hirenodes.io",
  BOUNTY_FETCH_INTERVAL: "1800000",
  TWEET_DELAY: "30000",
  LOG_LEVEL: "info",
  VERBOSE_LOGGING: "true"
};

const rl = createInterface({
  input: process.stdin,
  output: process.stdout,
});

const question = (query) => new Promise((resolve) => rl.question(query, resolve));

async function main() {
  const envPath = resolve(process.cwd(), ".env");

  if (!existsSync(envPath)) {
    console.error("❌ .env file not found. Please create one from .env.example");
    process.exit(1);
  }

  config({ path: envPath });

  for (const varName of REQUIRED_VARS) {
    if (!process.env[varName]) {
      const hint = ENV_HINTS[varName] || `Enter value for ${varName}`;
      const defaultValue = DEFAULT_VALUES[varName];

      const promptText = defaultValue
        ? `${hint}\n(Press Enter for default: ${defaultValue})\n> `
        : `${hint}\n> `;

      const answer = await question(promptText);
      process.env[varName] = answer || defaultValue || "";

      if (!process.env[varName] && REQUIRED_VARS.includes(varName)) {
        console.error(`❌ ${varName} is required`);
        process.exit(1);
      }
    }
  }

  console.log("✅ Environment validation complete!");
  rl.close();
}

main().catch((error) => {
  console.error("❌ Error validating environment:", error);
  process.exit(1);
});
